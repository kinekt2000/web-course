{"version":3,"sources":["webpack://auction-participation/./src/dash.js"],"names":[],"mappings":";;;;;;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,UAAU;AAClC;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,SAAS;;;AAGT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB,kBAAkB;AACxC;AACA;AACA;AACA;AACA;;AAEA;AACA,6BAA6B,yBAAyB;AACtD,KAAK;;AAEL;AACA;AACA;AACA;AACA,mCAAmC,UAAU;AAC7C;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,mCAAmC,UAAU;AAC7C;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA,sCAAsC,KAAK;AAC3C,0CAA0C,iBAAiB;AAC3D,KAAK;;AAEL;AACA;AACA;AACA;AACA,mCAAmC,cAAc,MAAM,UAAU,MAAM,WAAW;AAClF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,kCAAkC,cAAc;AAChD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;;AAEb,+BAA+B,WAAW;AAC1C;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,mCAAmC,cAAc,MAAM,UAAU,OAAO,WAAW;AACnF;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kCAAkC,cAAc;AAChD;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,sBAAsB,sBAAsB;AAC5C;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA,8BAA8B,gHAAgH;AAC9I,KAAK;;;AAGL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,sBAAsB,oBAAoB,GAAG,QAAQ;AACrD;AACA,KAAK;AACL,CAAC;;AAED;AACA;;AAEA;AACA,uDAAuD,YAAY,YAAY,cAAc;AAC7F;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,4BAA4B,gBAAgB;AAC5C;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA;AACA,aAAa;;AAEb,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,C","file":"./scripts/dash.js","sourcesContent":["let paintings = [];\nlet images = [];\n\nconst colors = [\n    \"#9b453c\",\n    \"#3a5572\",\n    \"#4a3b6d\",\n    \"#515151\",\n    \"#ab3f03\",\n    \"#316927\"\n]\n\nfunction randColor() {\n    const n = Math.floor(Math.random() * colors.length);\n    return colors[n];\n}\n\nlet current;\nlet count;\nlet countdown;\n\n$(() => {\n    let [m, s] = $(\"#tillend .data\").text().split(\":\");\n    countdown = parseInt(m) * 60 + parseInt(s);\n    console.log(m, s)\n\n    // initialize first painting\n    $.get(\"/painting\", {number: 0})\n        .done((data) => {\n            paintings.push(data);\n            current = 0;\n\n            if(data.timeout !== null) {\n                data.timer = setInterval(() => {\n                    data.timeout--;\n                }, 1000)\n            }\n\n            showImage(0);\n\n            $.get(\"/count\")\n                .done((data) => {\n                    count = parseInt(data)\n                    if(count > 1) {\n                        $(\"#next\").removeClass(\"disabled\");\n                    }\n                })\n        })\n\n\n    // initialize jquery-ui\n    $(\".user-portlets\").sortable({\n        connectWith: \".user-portlets\",\n        handle: \".portlet-header\",\n        cancel: \".portlet-toggle\",\n        cursor: \"move\"\n    })\n\n    $(\".portlet\")\n        .addClass(\"ui-widget ui-widget-content ui-corner-all\")\n        .find(\".portlet-header\")\n        .addClass(\"ui-widget-header ui-corner-all\")\n        .prepend($(\"<span class='ui-icon ui-icon-minus portlet-toggle'>\"))\n\n    $(\".portlet-toggle\").click(function () {\n        const icon = $(this);\n        icon.toggleClass(\"ui-icon-minus ui-icon-plus\")\n        icon.closest(\".portlet\").find(\".portlet-content\").toggle();\n    })\n\n    $(\"#prev\").click(() => {\n        prev();\n    })\n\n    $(\"#next\").click(() => {\n        next();\n    })\n\n    $(\"#up\").click(() => {\n        up();\n    })\n\n    $(\"#down\").click(() => {\n        down();\n    })\n\n    let socket = io.connect(\"http://localhost:3030\");\n    const user = User();\n    const color = randColor();\n\n    function User() {\n        const words = $(\"#balance .portlet-header\").text().split(\" \");\n        let user = \"\";\n        for(let i = 1; i < words.length; i++){\n            if(i !== 1) user += \" \";\n            user += words[i];\n        }\n        return user;\n    }\n\n    socket.on(\"connect\", () => {\n        socket.emit(\"init\", {name: user, color: color})\n    })\n\n    socket.on(\"connected_message\", (data) => {\n        $(\"#trading\")\n            .append($(`<li>`)\n                .append($(`<span class=\"message-type connected\">Connected:<\\span>`).css(\"color\", data.color))\n                .append($(`<span>${data.name}</span>`).css(\"color\", data.color))\n            )\n    })\n\n    socket.on(\"disconnected_message\", (data) => {\n        $(\"#trading\")\n            .append($(`<li>`)\n                .append($(`<span class=\"message-type connected\">Disconnected:<\\span>`).css(\"color\", data.color))\n                .append($(`<span>${data.name}</span>`).css(\"color\", data.color))\n            )\n    })\n\n    let message_timer;\n    socket.on(\"cannot_raise\", (data) => {\n        let message = $(\"#price-setting .portlet-content div:last-child\");\n        if(!message.hasClass(\"message\")) {\n            message = $(\"<div class='message'>\").appendTo($(\"#price-setting .portlet-content\"));\n        }\n\n        message.text(`cannot raise: ${data}`)\n        message_timer = setTimeout(() => {message.remove()}, 2000);\n    })\n\n    socket.on(\"raise\", (data) => {\n        $(\"#trading\")\n            .append($(`<li>`)\n                .append($(`<span class=\"message-type raised\">Raised:<\\span>`).css(\"color\", data.color))\n                .append($(`<span>${data.painting} by ${data.name} to ${data.price}</span>`).css(\"color\", data.color))\n            )\n\n        if(paintings[data.paintingNumber]) {\n            paintings[data.paintingNumber].currentPrice = data.price;\n            paintings[data.paintingNumber].buyer = data.name;\n            paintings[data.paintingNumber].timeout = data.timeout;\n            paintings[data.paintingNumber].timer = setInterval(() => {\n                paintings[data.paintingNumber].timeout--\n            }, 1000)\n        }\n\n        if(data.name === user) {\n            const residual = $(\"#balance .portlet-content .data-block:last-of-type .data\")\n            residual.text(parseInt(residual.text()) - data.price);\n            $(\"#leading-list\").append($(\"<li>\")\n                .append($(`<div>${data.painting}</div>`))\n            )\n        } else {\n            $(\"#leading-list div\").each(function () {\n                if($(this).text() === data.painting) {\n                    $(this).remove();\n                }\n            })\n\n            $.get(\"/extUser\", {name: user})\n                .done((data) => {\n                    $(\"#balance .portlet-content .data-block:last-of-type .data\").text(data.residual);\n                })\n        }\n\n        if(data.paintingNumber === $(\".image-field\").data(\"number\")) showImage(data.paintingNumber)\n    })\n\n    socket.on(\"sold\", (data) => {\n        $(\"#trading\")\n            .append($(`<li>`)\n                .append($(`<span class=\"message-type sold\">Sold:<\\span>`).css(\"color\", data.color))\n                .append($(`<span>${data.painting} to ${data.name} for ${data.price}</span>`).css(\"color\", data.color))\n            )\n\n        if(paintings[data.paintingNumber]) {\n            paintings[data.paintingNumber].sold = true;\n            clearInterval(paintings[data.paintingNumber].timer);\n            paintings[data.paintingNumber].timer = null;\n        }\n\n        if(data.name === user) {\n            const fund = $(\"#balance .portlet-content .data-block:first-of-type .data\")\n            fund.text(parseInt(fund.text()) - data.price);\n            $(\"#purchase-list\").append($(\"<li>\")\n                .append($(`<div>${data.painting}</div>`))\n            )\n\n            $(\"#leading-list div\").each(function () {\n                if($(this).text() === data.painting) {\n                    $(this).remove();\n                }\n            })\n        }\n\n        if(data.paintingNumber === $(\".image-field\").data(\"number\")) showImage(data.paintingNumber)\n    })\n\n    socket.on(\"update_time\", (data) => {\n        if(Math.abs(countdown - data.countdown) > 1) countdown = data.countdown;\n        for(let i = 0; i < paintings.length; i++) {\n            if(data.timers[i] !== null) {\n                if(Math.abs(data.timers[i] - paintings[i].timeout) > 1) paintings[i].timeout = data.timers[i];\n            }\n        }\n    })\n\n    socket.on(\"update\", () => {\n        location.reload();\n    })\n\n    $(\"#raise\").click(() => {\n        socket.emit(\"raise\", {name: user, price: parseInt($(\"#price-setting .user-price\").text()), painting: $(\".image-field\").data(\"number\")})\n    })\n\n\n    setInterval(() => {\n        const painting = paintings[$(\".image-field\").data(\"number\")]\n\n        if(painting) {\n            $(\"#timeout .data\").text(painting.timeout === null ? \"N/A\" : (timeToStr(painting.timeout) < 0) ? \"0\" :timeToStr(painting.timeout));\n        }\n\n        countdown--;\n        $(\"#tillend .data\").text(timeToStr(countdown));\n\n        function timeToStr(time) {\n            return `${Math.floor(time/60)}:${time%60}`;\n        }\n    }, 1000)\n})\n\nfunction showImage(number) {\n    let painting = paintings[number];\n\n    if(images[number] === undefined) {\n        images[number] = $(`<img src='/public/images/${painting.id}.jpg' alt=${painting.name}>`);\n    }\n\n    $(\".image-wrapper\")\n        .empty()\n        .append(images[number]);\n\n    $(\"#painting-name .data\").text(painting.name);\n    $(\"#painting-author .data\").text(painting.author);\n    $(\"#description .data\").text(painting.description);\n\n    const startingPrice = $(\".starting-price .data\").text(painting.price);\n    const currentPrice = $(\".current-price .data\").text(painting.currentPrice || painting.price);\n\n    if(painting.buyer) {\n        $(\".customer\").removeClass(\"absent\");\n        $(\".customer .data\").text(painting.buyer);\n    } else {\n        $(\".customer\").addClass(\"absent\");\n        $(\".customer .data\").text(\"absent\");\n    }\n\n    if(painting.sold) {\n        $(\".data-wrapper .data-block.status .data\").text(\"SOLD\");\n        $(\".data-wrapper .data-block.status\").addClass(\"sold\");\n    } else {\n        $(\".data-wrapper .data-block.status .data\").text(\"IN THE AUCTION\");\n        $(\".data-wrapper .data-block.status\").removeClass(\"sold\");\n    }\n\n    $(\".user-price\").text(painting.buyer ? currentPrice.text() : (parseInt(currentPrice.text()) + painting.step))\n    $(\".image-field\").data(\"number\", number);\n}\n\nfunction prev() {\n    current--;\n    showImage(current);\n\n    if(current === count - 2) {\n        $(\"#next\").removeClass(\"disabled\");\n    }\n\n    if(current === 0) {\n        $(\"#prev\").addClass(\"disabled\");\n    }\n}\n\nfunction next(){\n    current++;\n\n    const painting = paintings[current];\n\n    if(painting === undefined) {\n        const prevEl = $(\"#prev\");\n        const nextEl = $(\"#next\");\n\n        const prev_disabled = prevEl.hasClass(\"disabled\");\n        const next_disabled = nextEl.hasClass(\"disabled\");\n\n        nextEl.addClass(\"disabled\");\n        prevEl.addClass(\"disabled\");\n\n        $.get(\"/painting\", {number: current})\n            .done((data) => {\n                paintings.push(data)\n\n                if(data.timeout !== null) {\n                    data.timer = setInterval(() => {\n                        data.timeout--;\n                    }, 1000)\n                }\n\n                if(!prev_disabled) prevEl.removeClass(\"disabled\");\n                if(!next_disabled) nextEl.removeClass(\"disabled\");\n                handle();\n            })\n\n    } else {\n        handle();\n    }\n\n    function handle() {\n        showImage(current);\n        if(current === count - 1) {\n            $(\"#next\").addClass(\"disabled\");\n        }\n\n        if(current === 1) {\n            $(\"#prev\").removeClass(\"disabled\");\n        }\n    }\n}\n\nfunction up() {\n    const number = parseInt($(\".image-field\").data(\"number\"));\n    const painting = paintings[number];\n\n    const priceSetter = $(\"#price-setting .user-price\")\n    const currentRaise = parseInt(priceSetter.text());\n    priceSetter.text(currentRaise + painting.step);\n}\n\nfunction down() {\n    const number = parseInt($(\".image-field\").data(\"number\"));\n    const painting = paintings[number];\n\n    const priceSetter = $(\"#price-setting .user-price\")\n    const currentRaise = parseInt(priceSetter.text());\n\n    const startingPrice = $(\".starting-price .data\");\n    const currentPrice = $(\".current-price .data\");\n\n    if(startingPrice.text() === currentPrice.text()) {\n        if(currentRaise - painting.step >= parseInt(currentPrice.text())){\n            priceSetter.text(currentRaise - painting.step)\n        }\n    } else {\n        if(currentRaise - painting.step >= parseInt(currentPrice.text()) + painting.step){\n            priceSetter.text(currentRaise - painting.step)\n        }\n    }\n}"],"sourceRoot":""}